// partially generated by https://quicktype.io
namespace Meteor.ddp
{
    using Newtonsoft.Json;
    using static Meteor.ddp.DdpConnection;

    public partial class ReceivedDataError
    {
        [JsonProperty(Field.ERROR)]
        public string Error { get; set; }

        [JsonProperty(Field.REASON)]
        public string Reason { get; set; }

        [JsonProperty(Field.MESSAGE)]
        public string Message { get; set; }

        [JsonProperty(Field.ERROR_TYPE)]
        public string ErrorType { get; set; }

        [JsonProperty(Field.OFFENDING_MESSAGE)]
        public string OffendingMessage { get; set; }
    }

    public partial class ReceivedData
    {
        [JsonProperty(Field.MSG)]
        public string Msg { get; set; }

        [JsonProperty(Field.ID)]
        public string Id { get; set; }

        [JsonProperty(Field.SESSION)]
        public string Session { get; set; }

        [JsonProperty(Field.SUPPORT)]
        public string[] Support { get; set; }

        [JsonProperty(Field.VERSION)]
        public string Version { get; set; }

        [JsonProperty(Field.ERROR)]
        public ReceivedDataError Error { get; set; }

        [JsonProperty(Field.COLLECTION)]
        public string Collection { get; set; }

        [JsonProperty(Field.FIELDS)]
        public object Fields { get; set; }

        [JsonProperty(Field.SUBS)]
        public string[] Subs { get; set; }

        [JsonProperty(Field.BEFORE)]
        public string Before { get; set; }

        [JsonProperty(Field.RESULT)]
        public object Result { get; set; }

        [JsonProperty(Field.METHODS)]
        public string[] Methods { get; set; }
    }

    public partial class ReceivedData
    {
        public static ReceivedData FromJson(string json) => JsonConvert.DeserializeObject<ReceivedData>(json, IgnoreNullConverter.Settings);
    }

    public static class SerializeReceivedData
    {
        public static string ToJson(this ReceivedData self) => JsonConvert.SerializeObject(self, IgnoreNullConverter.Settings);
    }


}
